#!/usr/bin/env ruby

# frozen_string_literal: true

require 'erb'
require 'fileutils'

TMUX_SCRIPTS_FOLDER = File.expand_path('~/.tmuxgen')

def template_list
  template_files = Dir["#{TMUX_SCRIPTS_FOLDER}/templates/*.erb"].sort
  template_files.map { |p| p.match(%r{.*/(.*)\.erb})[1] }.sort
end

def print_help(template_list)
  options = template_list.join(', --')
  puts <<-HELP
  tmuxgen: A tmux script generator

  Usage:
    tmuxgen folder_path --template

    --template: the type of template to render, options are: --#{options}
  Example:
    tmuxgen . --rails
  HELP
  exit
end

def render_template(project_path, template_name)
  print_help(template_list) unless project_path && template_name

  expanded_project_path = File.expand_path(project_path)
  project_name = File.basename(expanded_project_path).tr('.', '-')
  puts "Project path: #{expanded_project_path}"
  puts "Project name: #{project_name}"
  puts "Template name: #{template_name}"

  template_file_name = template_name.gsub('--', '')
  template_path = "#{TMUX_SCRIPTS_FOLDER}/templates/#{template_file_name}.erb"

  if File.exist?(template_path)
    render_and_write_template(expanded_project_path, project_name, template_file_name)
  else
    print_help(template_list)
  end
end

def render_and_write_template(project_path, project_name, template_name)
  template_path = "#{TMUX_SCRIPTS_FOLDER}/templates/#{template_name}.erb"
  template = File.read(template_path)
  renderer = ERB.new(template)
  filename = "#{TMUX_SCRIPTS_FOLDER}/#{project_name}-tmux"
  File.write(filename, renderer.result(binding))
  FileUtils.chmod('+x', filename)
end

if ARGV.length != 2
  print_help(template_list)
else
  render_template(ARGV[0], ARGV[1])
end
